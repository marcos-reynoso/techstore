// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== MODELOS PRINCIPALES =====

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String? 
  avatar    String?
  role      Role     @default(CUSTOMER)
  
  // Relations
  orders    Order[]
  reviews   Review[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  
  // Relations
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal  @db.Decimal(10, 2)
  image       String
  images      String[] // Array de im√°genes adicionales
  stock       Int      @default(0)
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  
  // Relations
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  reviews     Review[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
  @@index([featured])
  @@index([active])
  @@index([price])
  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  
  // Shipping Info
  shippingName    String
  shippingEmail   String
  shippingAddress String
  shippingCity    String
  shippingZip     String
  
  // Relations
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  
  // Relations
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  product  Product @relation(fields: [productId], references: [id])
  productId String
  
  @@map("order_items")
}

model Review {
  id      String @id @default(cuid())
  rating  Int    // 1-5 stars
  comment String
  
  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Un usuario solo puede hacer una review por producto
  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
  @@map("reviews")
}

// ===== ENUMS =====

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}